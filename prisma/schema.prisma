// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  timezone      String?
  useAI         Boolean   @default(false)
  aiConfig      Json?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  agendas       Agenda[]
  projects      Project[]
  gitExportConfigs GitExportConfig[]
  gitExportAttempts GitExportAttempt[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id           String  @id @default(cuid())
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  completed    Boolean @default(false)
  archived     Boolean @default(false)
  important    Boolean @default(false)
  urgent       Boolean @default(false)
  someday      Boolean @default(false)
  description  String @default("")
  createdAt    DateTime
  agendaTasks  AgendaTask[]
  tags         Tag[]
  projects     Project[]
  subjectRelations TaskRelation[] @relation("Subject")
  objectRelations  TaskRelation[] @relation("Object")
  embeddings  TaskEmbedding[]

  @@unique([userId, createdAt])
}

model TaskEmbedding {
  taskId       String
  version      String
  vector       Unsupported("vector")
  task         Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, version])
}

model Agenda {
  id           String @id @default(cuid())
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  date         DateTime @db.Date
  agendaTasks  AgendaTask[]
  rawCompletion String?

  @@unique([userId, date])
}

model AgendaTask {
  agendaId  String
  taskId    String
  agenda    Agenda  @relation(fields: [agendaId], references: [id], onDelete: Cascade)
  task      Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  deferred  Boolean @default(false)

  @@id([agendaId, taskId])
}

model Tag {
  id           String @id @default(cuid())
  userId       String
  name         String
  tasks        Task[]

  @@unique([userId, name])
}

model TaskRelation {
  id        String @id @default(cuid())
  subject   Task @relation("Subject", fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId String
  object    Task @relation("Object", fields: [objectId], references: [id], onDelete: Cascade)
  objectId  String
  type      String

  @@unique([subjectId, type, objectId])
}

model Project {
  id        String @id @default(cuid())
  userId    String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  tasks     Task[]

  @@unique([userId, name])
}

model Day {
  date      DateTime @id @db.Date
  quoteId   String
  quote     Quote    @relation(fields: [quoteId], references: [id], onDelete: Restrict)
}

model Quote {
  id            String @id @default(cuid())
  userId        String?
  content       String
  author        String
  source        String?
  lastQuotedOn  DateTime? @db.Date
  days          Day[]

  @@index(lastQuotedOn)
}

model GitExportConfig {
  id            String @id @default(cuid())
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  sshPrivateKey String?
  sshPublicKey  String?
  remoteUrl     String?
  branchName    String @default("main")
  exportAttempts GitExportAttempt[]

  @@index(userId)
}

model GitExportAttempt {
  id            String @id @default(cuid())
  userId        String
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  configId      String
  config        GitExportConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  result        String
  status        String
  startedAt     DateTime?
  finishedAt    DateTime?

  @@index([userId, startedAt])
  @@index([configId, startedAt])
}